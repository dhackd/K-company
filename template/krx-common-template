#!/bin/bash
export SERVER_LAUNCHER_CLASS=_launcher_
export RUN_PROFILES=_profiles_
export SERVER_MEM_OPTIONS="-Xms2g -Xmx2g"

function debug() {
  if [ -n "$DEBUG" ]; then
    echo $@
  fi
}

function message-on() {
  printf "%s" "$@"
}

function fail() {
  MESSAGE="$1"
  echo -e "\\033[01;31m$MESSAGE\\033[00m"
}

function success() {
  MESSAGE="$1"
  echo -e "\\033[01;32m$MESSAGE\\033[00m"
}

function warning() {
  MESSAGE=$1
  echo -e "\\033[01;33m$MESSAGE\\033[00m"
}

function message() {
  MESSAGE=$1
  echo -e "\\033[00m$MESSAGE"
}

function strong() {
  MESSAGE=$1
  echo -e "\\033[01;32m$MESSAGE\\033[00m"
}

function print-version() {
  KRX_VERSION=${KRX_VERSION:-$(cat "$KRX_HOME/VERSION")}
  if [ "Y" == "$PRETTY_PRINT" ]; then
    success "Coinstack OAuth $KRX_VERSION"
  else
    echo "$KRX_VERSION"
  fi

}

function print-help() {
  HELPFILE="$KRX_DOC/help.txt"
  if [ -e "$HELPFILE" ];then
    cat "$HELPFILE"
  fi
}

function configure-classpath() {
  JARS=$(find "$KRX_LIB" -name '*.jar' | tr '\n' ':')
  CLASS_PATH=${CLASS_PATH:-$KRX_CONF:$JARS}
}

function configure-config-files() {
  CONFIG_FILES=""
  for CONFIG_FILE in $(find $KRX_CONF -name '*.yaml' -exec basename {} \; | sed 's/^/classpath:\//')
  do
    if [ -z $CONFIG_FILES ]; then
      CONFIG_FILES="$CONFIG_FILE"
    else
      CONFIG_FILES="$CONFIG_FILES,$CONFIG_FILE"
    fi
  done
  export CONFIG_FILES
  export JVM_OPTS="$JVM_OPTS -Dspring.config.location=$CONFIG_FILES"
}

function execute-java() {
  if [ -e `java -version 2>&1 | grep '' > /dev/null` ]; then
    echo "" > /dev/null
  else
    echo "Java is not installed"
    return -1
  fi
  configure-classpath
  debug "Execution command: java $JVM_OPTS -classpath $CLASS_PATH $MAIN_CLASS $@"
  if [ "1" == "$DAEMON_MODE" ]; then
    java $JVM_OPTS -classpath "$CLASS_PATH" "$MAIN_CLASS" $@ >/dev/null 2>&1 &
  else
    java $JVM_OPTS -classpath "$CLASS_PATH" "$MAIN_CLASS" $@
  fi
}

################################################################################
#  Server commands
#   * check
#   * start
#   * stop

function restart-server() {
  stop-server $@ && start-server $@
}

function start-server-native() {
  JVM_OPTS="$JVM_OPTS $SERVER_MEM_OPTIONS"
  while test $# -gt 0
  do
    ARG="$1"
    shift
    case "$ARG" in
      "--profile"|"-p")
        EXEC_PROFILES="$1"
        shift
        ;;
      "--daemon"|"-d")
        DAEMON_MODE="1"
        ;;
    esac
  done
  LOGBACK_OPTS="-Dlogging.config=$KRX_CONF/logback-server.xml"

  if [ -z "$EXEC_PROFILES" ]; then
    JVM_OPTS="$JVM_OPTS -Dspring.profiles.active=$RUN_PROFILES"
  else
    JVM_OPTS="$JVM_OPTS -Dspring.profiles.active=$RUN_PROFILES,$EXEC_PROFILES"
  fi
  JVM_OPTS="$JVM_OPTS -Dkrx.home=$KRX_HOME"
  JVM_OPTS="$JVM_OPTS $LOGBACK_OPTS"
  configure-classpath
  export JVM_OPTS
  export MAIN_CLASS="$SERVER_LAUNCHER_CLASS"
  export DAEMON_MODE
  execute-java
}

function stop-server-native() {
  ANSWER="$(jps -l | grep $SERVER_LAUNCHER_CLASS)"
  if [ -z "$ANSWER" ]; then
    fail "No process detected"
    return -1
  fi
  ARG="$1"
  if [ -n "$ARG" ]; then
    if [[ "--force" == "$ARG" ]] || [[ "-f" == "$ARG" ]]; then
      PID=`echo "$ANSWER" | awk '{print $1}'`
      KILL=$(kill -9 $PID)
      success "Forcely shotdown success"
      return 0
    else
      fail "Unknown argument"
      return -1
    fi
  fi
  SERVER_HOSTNAME=`get-config server.hostname || echo "localhost"`
  SERVER_PORT=`get-config server.port || echo "8080"`
  SHUTDOWN_URL="http://$SERVER_HOSTNAME:$SERVER_PORT/manage/shutdown"
  CURL_INFO=`curl -is -X POST $SHUTDOWN_URL`
  STATUS_CODE=`echo "$CURL_INFO" |grep 'HTTP/' |grep '200' | awk '{print $2}'`
  if [  "200" == "$STATUS_CODE" ]; then
    START_TIME=$(date +%s)
    while [ -n "$(jps -l | grep $SERVER_LAUNCHER_CLASS)" ]
    do
      END_TIME=$(date +%s)
      DIFF_TIME=`echo $((END_TIME - START_TIME))`
      if [ 3 -gt $DIFF_TIME ]; then
        sleep 1
        continue
      else
        fail "Timeout error"
        return -1
      fi
    done
    success "Server stopped"
  else
    fail "Fail to stop gracefully! Kill process manually"
  fi
}


function check-server-native() {
  SERVER_HOSTNAME=`get-config server.hostname || echo "localhost"`
  SERVER_PORT=`get-config server.port || echo "8080"`

  HEALTH_URL="http://$SERVER_HOSTNAME:$SERVER_PORT/manage/health"
  ANSWER="$(curl -is $HEALTH_URL | grep 'HTTP/1.1' | awk '{print $2}')"
  FLAG="$(jps -l | grep $SERVER_LAUNCHER_CLASS)"
  if [ "200" != "$ANSWER" ]; then
    if [ -z "$FLAG" ]; then
      fail "Server stopped"
    else
      warning "Server is booting"
    fi
  else
    success "Server is running"
  fi
}

function run-server() {
  case "$EXECUTION_MODE" in
    "native")
      success "Server is running"
      start-server-native $@
      ;;
    "")
      fail "Execution mode not specified"
      ;;
    *)
      fail "Unknown mode: $EXECUTION_MODE"
      ;;
  esac
}

function start-server() {
  case "$EXECUTION_MODE" in
    "native")
      success "Server started"
      start-server-native --daemon $@
      ;;
    "")
      fail "Execution mode not specified"
      ;;
    *)
      fail "Unknown mode: $EXECUTION_MODE"
      ;;
  esac
}

function stop-server() {
  case $EXECUTION_MODE in
    "native")
      stop-server-native $@
      ;;
    "")
      fail "Execution mode not specified"
      ;;
    *)
      fail "Unknown mode: $EXECUTION_MODE"
      ;;
  esac
}

function check-server() {
  case $EXECUTION_MODE in
    "native")
      check-server-native $@
      ;;
    "")
      fail "Execution mode not specified"
      ;;
    *)
      fail "Unknown mode: $EXECUTION_MODE"
      ;;
  esac
}
function log-server() {
  ANSWER=$KRX_LOG/server-$(date +%Y-%m-%d).log
  if [ -e $ANSWER ]; then
    tail -f $ANSWER
  else
    fail "No process detected"
  fi
}
function configure-cli-logger() {
  ARGS=""
  while [[ $# -gt 0 ]]; do
    ARG="$1"
    shift
    case "$ARG" in
      "--log"|"-l")
        LOG_LEVEL="$1"
        shift
        ;;
      *)
        ARGS="$ARGS $ARG"
        ;;
    esac
  done
  LOG_LEVEL=${LOG_LEVEL:-none}
  LOG_CONFIGFILE="$KRX_CONF/logback-cli-$LOG_LEVEL.xml"
  if [ ! -f "$LOG_CONFIGFILE" ]; then
    fail "Unknown log level: $LOG_LEVEL"
    LOG_LEVEL='none'
  fi
  export LOG_CONFIGFILE="$KRX_CONF/logback-cli-$LOG_LEVEL.xml"
  export LOGBACK_OPTS="-Dlogging.config=$LOG_CONFIGFILE"
  export ARGS
}
function configure-cli() {
  configure-config-files
  configure-cli-logger $@
}
function get-config() {
  configure-cli $@
  configure-classpath
  export MAIN_CLASS='krx.exec.GetConfigurationLauncher'
  export DAEMON_MODE=
  export JVM_OPTS="$JVM_OPTS $LOGBACK_OPTS"
  execute-java $ARGS
}
